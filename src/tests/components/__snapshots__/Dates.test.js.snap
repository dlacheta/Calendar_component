// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dates component renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Dates
    availableDates={
      Array [
        "4/12/2018",
        "5/12/2018",
        "6/12/2018",
        "7/12/2018",
        "8/12/2018",
        "9/12/2018",
        "10/12/2018",
        "11/12/2018",
        "12/12/2018",
        "13/12/2018",
        "14/12/2018",
        "15/12/2018",
        "16/12/2018",
        "17/12/2018",
        "18/12/2018",
        "19/12/2018",
      ]
    }
    checkInDate=""
    checkInVisible={false}
    checkOutDate=""
    checkOutVisible={false}
    formDate={2018-12-24T12:33:08.013Z}
    nextMonth={[MockFunction]}
    onChangeCheckIn={[MockFunction]}
    onChangeCheckOut={[MockFunction]}
    pickCheckIn={[MockFunction]}
    pickCheckOut={[MockFunction]}
    previousMonth={[MockFunction]}
    toogleCheckIn={[MockFunction]}
    toogleCheckOut={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <span
          className="small_text"
        >
          Dates
        </span>,
        <div
          className="date_inputs"
        >
          <input
            className={null}
            onChange={[MockFunction]}
            onClick={[MockFunction]}
            placeholder="Check In"
            value=""
          />
          <i
            className="material-icons"
          >
            arrow_forward
          </i>
          <input
            className={null}
            onChange={[MockFunction]}
            onClick={[MockFunction]}
            placeholder="Check Out"
            value=""
          />
        </div>,
        null,
        null,
      ],
      "className": "dates",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Dates",
          "className": "small_text",
        },
        "ref": null,
        "rendered": "Dates",
        "type": "span",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <input
              className={null}
              onChange={[MockFunction]}
              onClick={[MockFunction]}
              placeholder="Check In"
              value=""
            />,
            <i
              className="material-icons"
            >
              arrow_forward
            </i>,
            <input
              className={null}
              onChange={[MockFunction]}
              onClick={[MockFunction]}
              placeholder="Check Out"
              value=""
            />,
          ],
          "className": "date_inputs",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": null,
              "onChange": [MockFunction],
              "onClick": [MockFunction],
              "placeholder": "Check In",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "arrow_forward",
              "className": "material-icons",
            },
            "ref": null,
            "rendered": "arrow_forward",
            "type": "i",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": null,
              "onChange": [MockFunction],
              "onClick": [MockFunction],
              "placeholder": "Check Out",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "div",
      },
      null,
      null,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span
            className="small_text"
          >
            Dates
          </span>,
          <div
            className="date_inputs"
          >
            <input
              className={null}
              onChange={[MockFunction]}
              onClick={[MockFunction]}
              placeholder="Check In"
              value=""
            />
            <i
              className="material-icons"
            >
              arrow_forward
            </i>
            <input
              className={null}
              onChange={[MockFunction]}
              onClick={[MockFunction]}
              placeholder="Check Out"
              value=""
            />
          </div>,
          null,
          null,
        ],
        "className": "dates",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Dates",
            "className": "small_text",
          },
          "ref": null,
          "rendered": "Dates",
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <input
                className={null}
                onChange={[MockFunction]}
                onClick={[MockFunction]}
                placeholder="Check In"
                value=""
              />,
              <i
                className="material-icons"
              >
                arrow_forward
              </i>,
              <input
                className={null}
                onChange={[MockFunction]}
                onClick={[MockFunction]}
                placeholder="Check Out"
                value=""
              />,
            ],
            "className": "date_inputs",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": null,
                "onChange": [MockFunction],
                "onClick": [MockFunction],
                "placeholder": "Check In",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "arrow_forward",
                "className": "material-icons",
              },
              "ref": null,
              "rendered": "arrow_forward",
              "type": "i",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": null,
                "onChange": [MockFunction],
                "onClick": [MockFunction],
                "placeholder": "Check Out",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "div",
        },
        null,
        null,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
